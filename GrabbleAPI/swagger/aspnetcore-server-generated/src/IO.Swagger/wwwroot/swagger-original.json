{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Grabble Order API",
    "description" : "This is the api server for Grabble.  You can find out more about     Grabble at [http://github.com/sguz3m4n/Grabble.git](http://github.com/sguz3m4n/Grabble.git).",
    "termsOfService" : "http://grabble.me/terms/",
    "contact" : {
      "email" : "dev@grabble.me"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://grabble.me"
  },
  "servers" : [ {
    "url" : "http://api.grabble.me/v1"
  } ],
  "tags" : [ {
    "name" : "order",
    "description" : "Operations about grabble orders"
  }, {
    "name" : "product",
    "description" : "Operations about product"
  } ],
  "paths" : {
    "/order" : {
      "get" : {
        "tags" : [ "order" ],
        "summary" : "Lists all orders",
        "description" : "List multiple orders",
        "operationId" : "listorders",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "x-content-type" : "application/xml"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value",
            "content" : { }
          }
        },
        "security" : [ {
          "orderproduct_auth" : [ "write:orders", "read:orders" ]
        } ]
      },
      "post" : {
        "tags" : [ "order" ],
        "summary" : "Add a new order to grabble",
        "operationId" : "addorder",
        "requestBody" : {
          "description" : "order object that needs to be added to the product",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input",
            "content" : { }
          }
        },
        "security" : [ {
          "orderproduct_auth" : [ "write:orders", "read:orders" ]
        } ]
      }
    },
    "/order/findByStatus" : {
      "get" : {
        "tags" : [ "order" ],
        "summary" : "Finds orders by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findordersByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "default" : "available",
              "enum" : [ "available", "pending", "sold" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "x-content-type" : "application/xml"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Order"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value",
            "content" : { }
          }
        },
        "security" : [ {
          "orderproduct_auth" : [ "write:orders", "read:orders" ]
        } ]
      }
    },
    "/order/{orderId}" : {
      "get" : {
        "tags" : [ "order" ],
        "summary" : "Find order by ID",
        "description" : "Returns a single order",
        "operationId" : "getorderById",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "ID of order to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "order not found",
            "content" : { }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "order" ],
        "summary" : "Updates a order in the product with form data",
        "operationId" : "updateorderWithForm",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "ID of order that needs to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Order"
              }
            }
          }
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input",
            "content" : { }
          }
        },
        "security" : [ {
          "orderproduct_auth" : [ "write:orders", "read:orders" ]
        } ]
      },
      "delete" : {
        "tags" : [ "order" ],
        "summary" : "Cancels an order",
        "operationId" : "cancelorder",
        "parameters" : [ {
          "name" : "x-api-key",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderId",
          "in" : "path",
          "description" : "order id to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "order not found",
            "content" : { }
          }
        },
        "security" : [ {
          "orderproduct_auth" : [ "write:orders", "read:orders" ]
        } ]
      }
    },
    "/product/inventory" : {
      "get" : {
        "tags" : [ "product" ],
        "summary" : "Returns order inventories by status",
        "description" : "Returns a map of status codes to quantities",
        "operationId" : "getInventory",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "integer",
                    "format" : "int32"
                  },
                  "x-content-type" : "application/json"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/product/order/{orderId}" : {
      "get" : {
        "tags" : [ "product" ],
        "summary" : "Find purchase order by ID",
        "description" : "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
        "operationId" : "getOrderById",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "ID of order that needs to be fetched",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Order not found",
            "content" : { }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Customer" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "customerId" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "fa322215-6733-4eca-90a9-70dc791fb351"
          },
          "username" : {
            "type" : "string"
          },
          "firstname" : {
            "type" : "string"
          },
          "surname" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string",
            "format" : "email"
          },
          "phone" : {
            "type" : "string"
          },
          "billingAddressId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "example" : {
          "firstname" : "firstname",
          "phone" : "phone",
          "surname" : "surname",
          "customerId" : "fa322215-6733-4eca-90a9-70dc791fb351",
          "billingAddressId" : 1,
          "id" : 6,
          "email" : "",
          "username" : "username"
        },
        "xml" : {
          "name" : "Customer"
        }
      },
      "Product" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          }
        },
        "example" : {
          "name" : "name",
          "id" : 7
        },
        "xml" : {
          "name" : "Product"
        }
      },
      "Order" : {
        "required" : [ "customer", "deliveryDate", "orderDate", "orderNumber", "paymentType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "orderNumber" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "fa322215-6733-4eca-90a9-70dc791fb351"
          },
          "orderDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "instructions" : {
            "type" : "string",
            "example" : "Ring buzzer twice and leave at door."
          },
          "paymentType" : {
            "type" : "string",
            "example" : "credit-card",
            "enum" : [ "credit-card", "cash-on-delivery", "mmoney", "paypal" ]
          },
          "customer" : {
            "$ref" : "#/components/schemas/Customer"
          },
          "billingAddressId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "shippingAddressId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "pickupAddressId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "product" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Product"
            }
          },
          "status" : {
            "type" : "string",
            "example" : "accepted",
            "enum" : [ "accepted", "completed" ]
          }
        },
        "example" : {
          "instructions" : "Ring buzzer twice and leave at door.",
          "product" : [ {
            "name" : "name",
            "id" : 7
          }, {
            "name" : "name",
            "id" : 7
          } ],
          "orderNumber" : "fa322215-6733-4eca-90a9-70dc791fb351",
          "pickupAddressId" : 2,
          "billingAddressId" : 5,
          "shippingAddressId" : 5,
          "id" : 0,
          "deliveryDate" : "2000-01-23T04:56:07.000+00:00",
          "orderDate" : "2000-01-23T04:56:07.000+00:00",
          "paymentType" : "credit-card",
          "customer" : {
            "firstname" : "firstname",
            "phone" : "phone",
            "surname" : "surname",
            "customerId" : "fa322215-6733-4eca-90a9-70dc791fb351",
            "billingAddressId" : 1,
            "id" : 6,
            "email" : "",
            "username" : "username"
          },
          "status" : "accepted"
        },
        "xml" : {
          "name" : "Order"
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    },
    "securitySchemes" : {
      "orderproduct_auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://api.grabble.me/oauth/dialog",
            "scopes" : {
              "write:orders" : "modify orders in your account",
              "read:orders" : "read your orders"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "x-api-key",
        "in" : "header"
      }
    }
  }
}
