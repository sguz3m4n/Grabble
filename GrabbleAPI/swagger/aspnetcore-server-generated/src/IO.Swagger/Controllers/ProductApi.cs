/*
 * Grabble Order API
 *
 * This is the api server for Grabble.  You can find out more about     Grabble at [http://github.com/sguz3m4n/Grabble.git](http://github.com/sguz3m4n/Grabble.git).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@grabble.me
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProductApiController : ControllerBase
    { 
        /// <summary>
        /// Returns order inventories by status
        /// </summary>
        /// <remarks>Returns a map of status codes to quantities</remarks>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/v1/product/inventory")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetInventory")]
        [SwaggerResponse(statusCode: 200, type: typeof(Dictionary<string, int?>), description: "successful operation")]
        public virtual IActionResult GetInventory()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Dictionary<string, int?>));
            string exampleJson = null;
            exampleJson = "{\n  \"key\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Dictionary<string, int?>>(exampleJson)
                        : default(Dictionary<string, int?>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <remarks>For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10.         Other values will generated exceptions</remarks>
        /// <param name="orderId">ID of order that needs to be fetched</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Order not found</response>
        [HttpGet]
        [Route("/v1/product/order/{orderId}")]
        [ValidateModelState]
        [SwaggerOperation("GetOrderById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Order), description: "successful operation")]
        public virtual IActionResult GetOrderById([FromRoute][Required][Range(1, 10)]long? orderId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Order));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"instructions\" : \"Ring buzzer twice and leave at door.\",\n  \"product\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 7\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 7\n  } ],\n  \"orderNumber\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n  \"pickupAddressId\" : 2,\n  \"billingAddressId\" : 5,\n  \"shippingAddressId\" : 5,\n  \"id\" : 0,\n  \"deliveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"paymentType\" : \"credit-card\",\n  \"customer\" : {\n    \"firstname\" : \"firstname\",\n    \"phone\" : \"phone\",\n    \"surname\" : \"surname\",\n    \"customerId\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n    \"billingAddressId\" : 1,\n    \"id\" : 6,\n    \"email\" : \"\",\n    \"username\" : \"username\"\n  },\n  \"status\" : \"accepted\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Order>(exampleJson)
                        : default(Order);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
