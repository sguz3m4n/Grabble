/*
 * Grabble Order API
 *
 * This is the api server for Grabble.  You can find out more about     Grabble at [http://github.com/sguz3m4n/Grabble.git](http://github.com/sguz3m4n/Grabble.git).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@grabble.me
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class OrderApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new order to grabble
        /// </summary>
        /// <param name="body">order object that needs to be added to the product</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/v1/order")]
        [ValidateModelState]
        [SwaggerOperation("Addorder")]
        public virtual ActionResult<string> Addorder([FromBody]Order body)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

           return "body";
        }

        /// <summary>
        /// Cancels an order
        /// </summary>
        /// <param name="orderId">order id to delete</param>
        /// <param name="xApiKey"></param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">order not found</response>
        [HttpDelete]
        [Route("/v1/order/{orderId}")]
        [ValidateModelState]
        [SwaggerOperation("Cancelorder")]
        public virtual IActionResult Cancelorder([FromRoute][Required]long? orderId, [FromHeader]string xApiKey)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Finds orders by status
        /// </summary>
        /// <remarks>Multiple status values can be provided with comma separated strings</remarks>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/v1/order/findByStatus")]
        [ValidateModelState]
        [SwaggerOperation("FindordersByStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Order>), description: "successful operation")]
        public virtual IActionResult FindordersByStatus([FromQuery][Required()]List<string> status)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Order>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"instructions\" : \"Ring buzzer twice and leave at door.\",\n  \"product\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 7\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 7\n  } ],\n  \"orderNumber\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n  \"pickupAddressId\" : 2,\n  \"billingAddressId\" : 5,\n  \"shippingAddressId\" : 5,\n  \"id\" : 0,\n  \"deliveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"paymentType\" : \"credit-card\",\n  \"customer\" : {\n    \"firstname\" : \"firstname\",\n    \"phone\" : \"phone\",\n    \"surname\" : \"surname\",\n    \"customerId\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n    \"billingAddressId\" : 1,\n    \"id\" : 6,\n    \"email\" : \"\",\n    \"username\" : \"username\"\n  },\n  \"status\" : \"accepted\"\n}, {\n  \"instructions\" : \"Ring buzzer twice and leave at door.\",\n  \"product\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 7\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 7\n  } ],\n  \"orderNumber\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n  \"pickupAddressId\" : 2,\n  \"billingAddressId\" : 5,\n  \"shippingAddressId\" : 5,\n  \"id\" : 0,\n  \"deliveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"paymentType\" : \"credit-card\",\n  \"customer\" : {\n    \"firstname\" : \"firstname\",\n    \"phone\" : \"phone\",\n    \"surname\" : \"surname\",\n    \"customerId\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n    \"billingAddressId\" : 1,\n    \"id\" : 6,\n    \"email\" : \"\",\n    \"username\" : \"username\"\n  },\n  \"status\" : \"accepted\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Order>>(exampleJson)
                        : default(List<Order>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find order by ID
        /// </summary>
        /// <remarks>Returns a single order</remarks>
        /// <param name="orderId">ID of order to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">order not found</response>
        [HttpGet]
        [Route("/v1/order/{orderId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetorderById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Order), description: "successful operation")]
        public virtual IActionResult GetorderById([FromRoute][Required]long? orderId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Order));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"instructions\" : \"Ring buzzer twice and leave at door.\",\n  \"product\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 7\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 7\n  } ],\n  \"orderNumber\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n  \"pickupAddressId\" : 2,\n  \"billingAddressId\" : 5,\n  \"shippingAddressId\" : 5,\n  \"id\" : 0,\n  \"deliveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"paymentType\" : \"credit-card\",\n  \"customer\" : {\n    \"firstname\" : \"firstname\",\n    \"phone\" : \"phone\",\n    \"surname\" : \"surname\",\n    \"customerId\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n    \"billingAddressId\" : 1,\n    \"id\" : 6,\n    \"email\" : \"\",\n    \"username\" : \"username\"\n  },\n  \"status\" : \"accepted\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Order>(exampleJson)
                        : default(Order);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Lists all orders
        /// </summary>
        /// <remarks>List multiple orders</remarks>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/v1/order")]
        [ValidateModelState]
        [SwaggerOperation("Listorders")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Order>), description: "successful operation")]
        public virtual IActionResult Listorders()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Order>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"instructions\" : \"Ring buzzer twice and leave at door.\",\n  \"product\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 7\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 7\n  } ],\n  \"orderNumber\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n  \"pickupAddressId\" : 2,\n  \"billingAddressId\" : 5,\n  \"shippingAddressId\" : 5,\n  \"id\" : 0,\n  \"deliveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"paymentType\" : \"credit-card\",\n  \"customer\" : {\n    \"firstname\" : \"firstname\",\n    \"phone\" : \"phone\",\n    \"surname\" : \"surname\",\n    \"customerId\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n    \"billingAddressId\" : 1,\n    \"id\" : 6,\n    \"email\" : \"\",\n    \"username\" : \"username\"\n  },\n  \"status\" : \"accepted\"\n}, {\n  \"instructions\" : \"Ring buzzer twice and leave at door.\",\n  \"product\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 7\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 7\n  } ],\n  \"orderNumber\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n  \"pickupAddressId\" : 2,\n  \"billingAddressId\" : 5,\n  \"shippingAddressId\" : 5,\n  \"id\" : 0,\n  \"deliveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"orderDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"paymentType\" : \"credit-card\",\n  \"customer\" : {\n    \"firstname\" : \"firstname\",\n    \"phone\" : \"phone\",\n    \"surname\" : \"surname\",\n    \"customerId\" : \"fa322215-6733-4eca-90a9-70dc791fb351\",\n    \"billingAddressId\" : 1,\n    \"id\" : 6,\n    \"email\" : \"\",\n    \"username\" : \"username\"\n  },\n  \"status\" : \"accepted\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Order>>(exampleJson)
                        : default(List<Order>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a order in the product with form data
        /// </summary>
        /// <param name="orderId">ID of order that needs to be updated</param>
        /// <param name="body"></param>
        /// <response code="405">Invalid input</response>
        [HttpPut]
        [Route("/v1/order/{orderId}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateorderWithForm")]
        public virtual IActionResult UpdateorderWithForm([FromRoute][Required]long? orderId, [FromBody]Order body)
        { 
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

            throw new NotImplementedException();
        }
    }
}
