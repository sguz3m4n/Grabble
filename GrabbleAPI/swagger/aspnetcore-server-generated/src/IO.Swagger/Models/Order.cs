/*
 * Grabble Order API
 *
 * This is the api server for Grabble.  You can find out more about     Grabble at [http://github.com/sguz3m4n/Grabble.git](http://github.com/sguz3m4n/Grabble.git).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@grabble.me
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Order : IEquatable<Order>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets OrderNumber
        /// </summary>
        [Required]
        [DataMember(Name="orderNumber")]
        public Guid? OrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [Required]
        [DataMember(Name="orderDate")]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryDate
        /// </summary>
        [Required]
        [DataMember(Name="deliveryDate")]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>
        /// Gets or Sets Instructions
        /// </summary>
        [DataMember(Name="instructions")]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PaymentTypeEnum
        {
            /// <summary>
            /// Enum CreditCardEnum for credit-card
            /// </summary>
            [EnumMember(Value = "credit-card")]
            CreditCardEnum = 0,
            /// <summary>
            /// Enum CashOnDeliveryEnum for cash-on-delivery
            /// </summary>
            [EnumMember(Value = "cash-on-delivery")]
            CashOnDeliveryEnum = 1,
            /// <summary>
            /// Enum MmoneyEnum for mmoney
            /// </summary>
            [EnumMember(Value = "mmoney")]
            MmoneyEnum = 2,
            /// <summary>
            /// Enum PaypalEnum for paypal
            /// </summary>
            [EnumMember(Value = "paypal")]
            PaypalEnum = 3        }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [Required]
        [DataMember(Name="paymentType")]
        public PaymentTypeEnum? PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [Required]
        [DataMember(Name="customer")]
        public Customer Customer { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressId
        /// </summary>
        [DataMember(Name="billingAddressId")]
        public long? BillingAddressId { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddressId
        /// </summary>
        [DataMember(Name="shippingAddressId")]
        public long? ShippingAddressId { get; set; }

        /// <summary>
        /// Gets or Sets PickupAddressId
        /// </summary>
        [DataMember(Name="pickupAddressId")]
        public long? PickupAddressId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product")]
        public List<Product> Product { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum AcceptedEnum for accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            AcceptedEnum = 0,
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 1        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  BillingAddressId: ").Append(BillingAddressId).Append("\n");
            sb.Append("  ShippingAddressId: ").Append(ShippingAddressId).Append("\n");
            sb.Append("  PickupAddressId: ").Append(PickupAddressId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    OrderNumber == other.OrderNumber ||
                    OrderNumber != null &&
                    OrderNumber.Equals(other.OrderNumber)
                ) && 
                (
                    OrderDate == other.OrderDate ||
                    OrderDate != null &&
                    OrderDate.Equals(other.OrderDate)
                ) && 
                (
                    DeliveryDate == other.DeliveryDate ||
                    DeliveryDate != null &&
                    DeliveryDate.Equals(other.DeliveryDate)
                ) && 
                (
                    Instructions == other.Instructions ||
                    Instructions != null &&
                    Instructions.Equals(other.Instructions)
                ) && 
                (
                    PaymentType == other.PaymentType ||
                    PaymentType != null &&
                    PaymentType.Equals(other.PaymentType)
                ) && 
                (
                    Customer == other.Customer ||
                    Customer != null &&
                    Customer.Equals(other.Customer)
                ) && 
                (
                    BillingAddressId == other.BillingAddressId ||
                    BillingAddressId != null &&
                    BillingAddressId.Equals(other.BillingAddressId)
                ) && 
                (
                    ShippingAddressId == other.ShippingAddressId ||
                    ShippingAddressId != null &&
                    ShippingAddressId.Equals(other.ShippingAddressId)
                ) && 
                (
                    PickupAddressId == other.PickupAddressId ||
                    PickupAddressId != null &&
                    PickupAddressId.Equals(other.PickupAddressId)
                ) && 
                (
                    Product == other.Product ||
                    Product != null &&
                    Product.SequenceEqual(other.Product)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (OrderNumber != null)
                    hashCode = hashCode * 59 + OrderNumber.GetHashCode();
                    if (OrderDate != null)
                    hashCode = hashCode * 59 + OrderDate.GetHashCode();
                    if (DeliveryDate != null)
                    hashCode = hashCode * 59 + DeliveryDate.GetHashCode();
                    if (Instructions != null)
                    hashCode = hashCode * 59 + Instructions.GetHashCode();
                    if (PaymentType != null)
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                    if (Customer != null)
                    hashCode = hashCode * 59 + Customer.GetHashCode();
                    if (BillingAddressId != null)
                    hashCode = hashCode * 59 + BillingAddressId.GetHashCode();
                    if (ShippingAddressId != null)
                    hashCode = hashCode * 59 + ShippingAddressId.GetHashCode();
                    if (PickupAddressId != null)
                    hashCode = hashCode * 59 + PickupAddressId.GetHashCode();
                    if (Product != null)
                    hashCode = hashCode * 59 + Product.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Order left, Order right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Order left, Order right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
